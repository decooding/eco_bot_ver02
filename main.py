from bs4 import BeautifulSoup
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram import Bot, Dispatcher, types
from kb import Main_keyboard, Color_keyboard, Digit_keyboard, Gis_keyboard
import g4f, requests, logging

color_map = {
    "üü¶": "–ë—É–º–∞–≥–∏ –∏ –∫–∞—Ä—Ç–æ–Ω–∞", 
    "üü©": "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã –∏–ª–∏ –ø–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã", 
    "üü•": "–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –±–∞—Ç–∞—Ä–µ–π–∫–∏, –ª–∞–º–ø—ã –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã", 
    "üüß": "–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –±–∞—Ç–∞—Ä–µ–π–∫–∏, –ª–∞–º–ø—ã –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã", 
    "üü®": "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —É–ø–∞–∫–æ–≤–∫–∞",
    }

digit_map = {
   "1Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω —Ç–µ—Ä–µ—Ñ—Ç–∞–ª–∞—Ç–∞ (PET) - —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –±—É—Ç—ã–ª–æ–∫ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤, —É–ø–∞–∫–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤–æ–ª–æ–∫–æ–Ω –¥–ª—è –æ–¥–µ–∂–¥—ã –∏ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∏–ª—è. ",
        "image": "./img/1.png",
    },
    "2Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω –Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–ü–ù–î) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –ø–∏—â–µ–≤—ã—Ö –ø–ª–µ–Ω–æ–∫, –º–µ—à–∫–æ–≤ –¥–ª—è –º—É—Å–æ—Ä–∞, –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã, –∏–≥—Ä—É—à–µ–∫ –∏ —Ç.–¥.",
        "image": "./img/2.png",
    },
    "3Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏–≤–∏–Ω–∏–ª—Ö–ª–æ—Ä–∏–¥ (PVC) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –æ–∫–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π, —Ç—Ä—É–±, –∫–∞–±–µ–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π, –ø–ª–µ–Ω–æ–∫ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏, —Å—É–º–æ–∫, –æ–±—É–≤–∏, –º–µ–±–µ–ª–∏, —Å—Ç–µ–Ω–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π, –∫–∞—Ä–∫–∞—Å–æ–≤ –¥–ª—è –∑–æ–Ω—Ç–∏–∫–æ–≤ –∏ –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        "image": "./img/3.png",
    },
    "4Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω –≤—ã—Å–æ–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–ü–í–•) - —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –±—É—Ç—ã–ª–æ–∫ –¥–ª—è –º–æ–ª–æ–∫–∞, –≤–æ–¥—ã, —Å–æ–∫–∞, –∞ —Ç–∞–∫–∂–µ –≤ —É–ø–∞–∫–æ–≤–∫–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤, –±—ã—Ç–æ–≤–æ–π —Ö–∏–º–∏–∏ –∏ –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        "image": "./img/4.png",
    },
    "5Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω (PP) - —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —É–ø–∞–∫–æ–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –ø–∏—â–µ–≤—ã—Ö –∫–æ—Ä–æ–±–æ–∫, –ø–∞–∫–µ—Ç–æ–≤, –∫—Ä—ã—à–µ–∫, –∫—Ä—ã—à–µ–∫ –¥–ª—è –±—É—Ç—ã–ª–æ–∫, –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –±—É—Ç—ã–ª–æ–∫, –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ —Ç.–¥.",
        "image": "./img/5.png",
    },
    "6Ô∏è‚É£": {
        "description": "–ü–æ–ª–∏—Å—Ç–∏—Ä–æ–ª (PS) - —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π, –≤–∫–ª—é—á–∞—è –ø–∏—â–µ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Å—Ç–∞–∫–∞–Ω—ã, –∫—Ä—ã—à–∫–∏ –¥–ª—è —Å—Ç–∞–∫–∞–Ω–æ–≤, –∏–≥—Ä—É—à–∫–∏, —É–ø–∞–∫–æ–≤–∫–∏, –∏–∑–¥–µ–ª–∏—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã, –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.",
        "image": "./img/6.png",
    },
    "7Ô∏è‚É£": {
        "description": "–ê–∫—Ä–∏–ª–æ–Ω–∏—Ç—Ä–∏–ª-–±—É—Ç–∞–¥–∏–µ–Ω-—Å—Ç–∏—Ä–æ–ª (ABS) - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏, –±—ã—Ç–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤, –∏–≥—Ä—É—à–µ–∫, –º–µ–±–µ–ª–∏, –±—É—Ç—ã–ª–æ–∫ –∏ –ø—Ä–æ—á–∏—Ö –∏–∑–¥–µ–ª–∏–π.",
        "image": "./img/7.png",
    },
}

API_TOKEN = "6232142718:AAGtjHPrJJPfAWGztHk-RzwKiTeMWHH4xFc"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=Main_keyboard,
    )

@dp.message_handler(lambda message: message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_menu(message: types.Message):
    await message.answer("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=Main_keyboard)

@dp.message_handler(lambda message: message.text == "‚ôªÔ∏è –£–∑–Ω–∞—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä –æ—Ç—Ö–æ–¥–æ–≤")
async def Marker(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —É—Ä–Ω—ã", reply_markup=Color_keyboard)
    await message.delete()

@dp.message_handler(lambda message: message.text in color_map.keys())
async def handle_color(message: types.Message):
    color = color_map[message.text]
    await message.answer(color)
    await message.delete()


@dp.message_handler(lambda message: message.text == "‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º")
async def send_random_value(message: types.Message):
    response = f'–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏, —É–∫–∞–∑–∞–≤ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–ø–∏—Å–∞–≤ –≤ –Ω–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ö –ø—Ä–∏–º–µ—Ä—É: " /q –ú–æ–∂–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –º—É—Å–æ—Ä?"'
    await message.answer(response)
    await message.delete()

@dp.message_handler(commands=["q"])
async def send_q_expert(message: types.Message):
    question = message.text.split(maxsplit=1)
    response = f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} : {question}"
    await bot.send_message("@ecologisticsexpert", response)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

@dp.message_handler(lambda message: message.text == "üî¢ –ö–æ–¥—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏")
async def send_random_value(message: types.Message):
    await message.answer(
        "‚ôªÔ∏è –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–¥—ã. "
        "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3-—Ö —Å—Ç—Ä–µ–ª–æ–∫ –≤ —Ñ–æ—Ä–º–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∞—è —Ç–∏–ø –ø–ª–∞—Å—Ç–∏–∫–∞.",
        reply_markup=Digit_keyboard,
    )
    await message.delete()

@dp.message_handler(lambda message: message.text in digit_map.keys())
async def handle_digit(message: types.Message):
    digit_key = message.text

    if digit_key in digit_map:
        item = digit_map[digit_key]
        description = item['description']
        image_path = item['image']
        with open(image_path, 'rb') as photo:
            # Send the photo with the description as caption
            await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption=description)
    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä.")
    await message.delete()


@dp.message_handler(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞")
async def msg_air_quality(message: types.Message):
    url = "https://www.iqair.com/kazakhstan/astana"
    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        aqi_value = soup.find('p', class_='aqi-value__value').text
        air_quality_status = soup.find('span', class_='aqi-status__text').text
        website_url = url

        result = f"–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞: {aqi_value}\n–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {air_quality_status}\n–°—Å—ã–ª–∫–∞ –Ω–∞ [—Å–∞–π—Ç]({website_url})"
    else:
        result = {f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}"}
    
    await message.answer(result, parse_mode='Markdown')

@dp.message_handler(commands=["gpt"])
async def cmd_gpt(message: types.Message):
    try:
        typing_message = await message.answer("–ü–µ—á–∞—Ç–∞–µ—Ç...") 
        user_text = message.text.split("/gpt ", 1)[1]
        response = await g4f.ChatCompletion.create_async(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç {user_text}"}],
        )
        
        await typing_message.delete()
        await message.answer(response) 
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await typing_message.delete()

@dp.message_handler(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã")
async def send_cafe_location(message: types.Message):
    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ò–ò –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –≤–∞—à —Ç–µ–∫—Å—Ç, –∫ –ø—Ä–∏–º–µ—Ä—É"
                         "'/gpt –ö–∞–∫–∏–µ –µ—Å—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—Å–ø–∏–π—Å–∫–æ–≥–æ –º–æ—Ä–µ, –∏ –∫–∞–∫ –∏—Ö —Ä–µ—à–∏—Ç—å'") 


@dp.message_handler(lambda message: message.text == "üìç –£–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è")
async def Gis_to_map(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä—å–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å",
        reply_markup=Gis_keyboard,
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)